{"version":3,"mappings":"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","names":["useStateKeyPrefix","useState","args","autoKey","_key","init","key","nuxtApp","useNuxtApp","state","toRef","initialValue","isRef","fetchContentNavigation","queryBuilder","content","useRuntimeConfig","queryContent","params","apiPath","withContentBase","hash","encodeQueryParams","shouldUseClientDB","m","data","jsonStringify","useContentPreview","ContentNavigation","defineComponent","props","query","toRefs","computed","_a","navigation2","useContent","navigation","useAsyncData","ctx","slots","useSlots","renderLink","link","h","NuxtLink","renderLinks","level","defaultNode","_sfc_main"],"ignoreList":[0,1,2],"sources":["../../../../node_modules/nuxt/dist/app/composables/state.js","../../../../node_modules/@nuxt/content/dist/runtime/legacy/composables/navigation.js","../../../../node_modules/@nuxt/content/dist/runtime/components/ContentNavigation.vue"],"sourcesContent":["import { isRef, toRef } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { toArray } from \"../utils.js\";\nconst useStateKeyPrefix = \"$s\";\nexport function useState(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  const [_key, init] = args;\n  if (!_key || typeof _key !== \"string\") {\n    throw new TypeError(\"[nuxt] [useState] key must be a string: \" + _key);\n  }\n  if (init !== void 0 && typeof init !== \"function\") {\n    throw new Error(\"[nuxt] [useState] init must be a function: \" + init);\n  }\n  const key = useStateKeyPrefix + _key;\n  const nuxtApp = useNuxtApp();\n  const state = toRef(nuxtApp.payload.state, key);\n  if (state.value === void 0 && init) {\n    const initialValue = init();\n    if (isRef(initialValue)) {\n      nuxtApp.payload.state[key] = initialValue;\n      return initialValue;\n    }\n    state.value = initialValue;\n  }\n  return state;\n}\nexport function clearNuxtState(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.state).map((key) => key.substring(useStateKeyPrefix.length));\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : toArray(keys);\n  for (const _key of _keys) {\n    const key = useStateKeyPrefix + _key;\n    if (key in nuxtApp.payload.state) {\n      nuxtApp.payload.state[key] = void 0;\n    }\n  }\n}\n","import { hash } from \"ohash\";\nimport { encodeQueryParams } from \"../../utils/query.js\";\nimport { jsonStringify } from \"../../utils/json.js\";\nimport { addPrerenderPath, shouldUseClientDB, withContentBase } from \"../../composables/utils.js\";\nimport { useContentPreview } from \"../../composables/preview.js\";\nimport { queryContent } from \"./query.js\";\nimport { useRuntimeConfig } from \"#imports\";\nexport const fetchContentNavigation = async (queryBuilder) => {\n  const { content } = useRuntimeConfig().public;\n  if (typeof queryBuilder?.params !== \"function\") {\n    queryBuilder = queryContent(queryBuilder);\n  }\n  const params = queryBuilder.params();\n  const apiPath = content.experimental.stripQueryParameters ? withContentBase(`/navigation/${process.dev ? \"_\" : `${hash(params)}.${content.integrity}`}/${encodeQueryParams(params)}.json`) : withContentBase(process.dev ? `/navigation/${hash(params)}` : `/navigation/${hash(params)}.${content.integrity}.json`);\n  if (!process.dev && process.server) {\n    addPrerenderPath(apiPath);\n  }\n  if (shouldUseClientDB()) {\n    const generateNavigation = await import(\"./client-db.js\").then((m) => m.generateNavigation);\n    return generateNavigation(params);\n  }\n  const data = await $fetch(apiPath, {\n    method: \"GET\",\n    responseType: \"json\",\n    params: content.experimental.stripQueryParameters ? void 0 : {\n      _params: jsonStringify(params),\n      previewToken: useContentPreview().getPreviewToken()\n    }\n  });\n  if (typeof data === \"string\" && data.startsWith(\"<!DOCTYPE html>\")) {\n    throw new Error(\"Not found\");\n  }\n  return data;\n};\n","<script>\nimport { toRefs, defineComponent, h, useSlots, computed } from \"vue\";\nimport { hash } from \"ohash\";\nimport { useAsyncData, fetchContentNavigation, useState, useContent } from \"#imports\";\nimport { NuxtLink } from \"#components\";\nconst ContentNavigation = defineComponent({\n  name: \"ContentNavigation\",\n  props: {\n    /**\n     * A query to be passed to `fetchContentNavigation()`.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    }\n  },\n  async setup(props) {\n    const {\n      query\n    } = toRefs(props);\n    const queryBuilder = computed(() => {\n      if (typeof query.value?.params === \"function\") {\n        return query.value.params();\n      }\n      return query.value;\n    });\n    if (!queryBuilder.value && useState(\"dd-navigation\").value) {\n      const { navigation: navigation2 } = useContent();\n      return { navigation: navigation2 };\n    }\n    const { data: navigation } = await useAsyncData(\n      `content-navigation-${hash(queryBuilder.value)}`,\n      () => fetchContentNavigation(queryBuilder.value)\n    );\n    return { navigation };\n  },\n  /**\n   * Navigation empty fallback\n   * @slot empty\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { navigation } = ctx;\n    const renderLink = (link) => h(NuxtLink, { to: link._path }, () => link.title);\n    const renderLinks = (data, level) => h(\n      \"ul\",\n      level ? { \"data-level\": level } : null,\n      data.map((link) => {\n        if (link.children) {\n          return h(\"li\", null, [renderLink(link), renderLinks(link.children, level + 1)]);\n        }\n        return h(\"li\", null, renderLink(link));\n      })\n    );\n    const defaultNode = (data) => renderLinks(data, 0);\n    return slots?.default ? slots.default({ navigation, ...this.$attrs }) : defaultNode(navigation);\n  }\n});\nexport default ContentNavigation;\n</script>\n"],"file":"_nuxt/ContentNavigation.Cp8hgech.js"}